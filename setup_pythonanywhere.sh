#!/bin/bash

# Script de setup para PythonAnywhere
echo "=== Setup PythonAnywhere ==="
echo ""

# Verificar se estamos no PythonAnywhere
if [[ "$HOSTNAME" != *"pythonanywhere"* ]]; then
    echo "‚ö†Ô∏è  Este script √© otimizado para PythonAnywhere"
    echo "Execute no console do PythonAnywhere"
    exit 1
fi

echo "‚úÖ Detectado PythonAnywhere"

# Fun√ß√£o para configurar ambiente
setup_environment() {
    echo "Configurando ambiente..."
    
    # Criar diret√≥rio do projeto se n√£o existir
    mkdir -p megasena
    cd megasena
    
    # Criar ambiente virtual
    python3 -m venv venv
    source venv/bin/activate
    
    # Atualizar pip
    pip install --upgrade pip
    
    echo "‚úì Ambiente configurado"
}

# Fun√ß√£o para instalar depend√™ncias
install_dependencies() {
    echo "Instalando depend√™ncias..."
    
    # Verificar se requirements existe
    if [ -f "requirements_pythonanywhere.txt" ]; then
        pip install -r requirements_pythonanywhere.txt
    elif [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
    else
        echo "‚ö†Ô∏è  Arquivo requirements n√£o encontrado"
        echo "Instalando Flask manualmente..."
        pip install Flask==3.1.1
    fi
    
    echo "‚úì Depend√™ncias instaladas"
}

# Fun√ß√£o para configurar logs
setup_logs() {
    echo "Configurando logs..."
    
    # Criar diret√≥rio de logs
    mkdir -p logs
    
    # Criar arquivo de log inicial
    touch logs/megasena.log
    
    echo "‚úì Logs configurados"
}

# Fun√ß√£o para configurar backup
setup_backup() {
    echo "Configurando backup..."
    
    # Criar script de backup
    cat > backup.sh << 'EOF'
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/home/seu-usuario/backups"
PROJECT_DIR="/home/seu-usuario/megasena"

mkdir -p $BACKUP_DIR
tar -czf $BACKUP_DIR/megasena_$DATE.tar.gz $PROJECT_DIR

# Manter apenas os √∫ltimos 7 backups
find $BACKUP_DIR -name "megasena_*.tar.gz" -mtime +7 -delete

echo "Backup criado: megasena_$DATE.tar.gz"
EOF

    chmod +x backup.sh
    
    echo "‚úì Backup configurado"
}

# Fun√ß√£o para configurar monitoramento
setup_monitoring() {
    echo "Configurando monitoramento..."
    
    # Criar script de monitoramento
    cat > monitor.sh << 'EOF'
#!/bin/bash
echo "=== Monitoramento Mega Sena ==="
echo ""

echo "üìä Status da aplica√ß√£o:"
if curl -s https://seu-usuario.pythonanywhere.com/health > /dev/null; then
    echo "‚úÖ Aplica√ß√£o online"
else
    echo "‚ùå Aplica√ß√£o offline"
fi

echo ""
echo "üìà Logs recentes:"
tail -5 logs/megasena.log

echo ""
echo "üíæ Uso de disco:"
df -h /home/seu-usuario

echo ""
echo "üß† Uso de mem√≥ria:"
free -h
EOF

    chmod +x monitor.sh
    
    echo "‚úì Monitoramento configurado"
}

# Fun√ß√£o para mostrar pr√≥ximos passos
show_next_steps() {
    echo ""
    echo "=== Setup Conclu√≠do! ==="
    echo ""
    echo "Pr√≥ximos passos:"
    echo ""
    echo "1. No Dashboard do PythonAnywhere:"
    echo "   - V√° para 'Web'"
    echo "   - Clique em 'Add a new web app'"
    echo "   - Escolha 'Manual configuration'"
    echo "   - Selecione Python 3.9+"
    echo ""
    echo "2. Configure o WSGI:"
    echo "   - Edite o arquivo WSGI"
    echo "   - Substitua o conte√∫do por:"
    echo "   import sys"
    echo "   path = '/home/seu-usuario/megasena'"
    echo "   if path not in sys.path:"
    echo "       sys.path.append(path)"
    echo "   from app_pythonanywhere import app as application"
    echo ""
    echo "3. Configure vari√°veis de ambiente:"
    echo "   - Web ‚Üí Environment variables"
    echo "   - Adicione: FLASK_ENV=production"
    echo ""
    echo "4. Reinicie a aplica√ß√£o:"
    echo "   - Clique em 'Reload' no dashboard"
    echo ""
    echo "5. Teste a aplica√ß√£o:"
    echo "   - Acesse: https://seu-usuario.pythonanywhere.com"
    echo ""
    echo "Comandos √∫teis:"
    echo "- Ver logs: tail -f logs/megasena.log"
    echo "- Backup: ./backup.sh"
    echo "- Monitor: ./monitor.sh"
    echo "- Reiniciar: touch /var/www/seu-usuario_pythonanywhere_com_wsgi.py"
    echo ""
}

# Executar todas as fun√ß√µes
main() {
    setup_environment
    install_dependencies
    setup_logs
    setup_backup
    setup_monitoring
    show_next_steps
}

# Executar script
main 