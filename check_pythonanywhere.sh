#!/bin/bash

# Script para verificar deploy no PythonAnywhere
echo "=== Verifica√ß√£o Deploy PythonAnywhere ==="
echo ""

# Verificar se estamos no PythonAnywhere
if [[ "$HOSTNAME" != *"pythonanywhere"* ]]; then
    echo "‚ö†Ô∏è  Este script √© otimizado para PythonAnywhere"
    echo "Execute no console do PythonAnywhere"
    exit 1
fi

echo "‚úÖ Detectado PythonAnywhere"

# Fun√ß√£o para verificar arquivos
check_files() {
    echo ""
    echo "1. Verificando arquivos do projeto..."
    
    if [ -f "megasena/app_pythonanywhere.py" ]; then
        echo "‚úÖ app_pythonanywhere.py existe"
    else
        echo "‚ùå app_pythonanywhere.py n√£o encontrado"
    fi
    
    if [ -f "megasena/requirements_pythonanywhere.txt" ]; then
        echo "‚úÖ requirements_pythonanywhere.txt existe"
    else
        echo "‚ùå requirements_pythonanywhere.txt n√£o encontrado"
    fi
    
    if [ -d "megasena/templates" ]; then
        echo "‚úÖ Pasta templates existe"
    else
        echo "‚ùå Pasta templates n√£o encontrada"
    fi
    
    if [ -d "megasena/static" ]; then
        echo "‚úÖ Pasta static existe"
    else
        echo "‚ùå Pasta static n√£o encontrada"
    fi
}

# Fun√ß√£o para verificar ambiente virtual
check_venv() {
    echo ""
    echo "2. Verificando ambiente virtual..."
    
    if [ -d "megasena/venv" ]; then
        echo "‚úÖ Ambiente virtual existe"
        
        # Verificar se Flask est√° instalado
        if megasena/venv/bin/python -c "import flask" 2>/dev/null; then
            echo "‚úÖ Flask est√° instalado"
        else
            echo "‚ùå Flask n√£o est√° instalado"
            echo "Execute: cd megasena && source venv/bin/activate && pip install -r requirements_pythonanywhere.txt"
        fi
    else
        echo "‚ùå Ambiente virtual n√£o encontrado"
    fi
}

# Fun√ß√£o para verificar logs
check_logs() {
    echo ""
    echo "3. Verificando logs..."
    
    if [ -d "megasena/logs" ]; then
        echo "‚úÖ Diret√≥rio de logs existe"
        
        if [ -f "megasena/logs/megasena.log" ]; then
            echo "‚úÖ Arquivo de log existe"
            echo "√öltimas 5 linhas dos logs:"
            tail -5 megasena/logs/megasena.log
        else
            echo "‚ùå Arquivo de log n√£o encontrado"
        fi
    else
        echo "‚ùå Diret√≥rio de logs n√£o encontrado"
    fi
}

# Fun√ß√£o para verificar aplica√ß√£o web
check_web_app() {
    echo ""
    echo "4. Verificando aplica√ß√£o web..."
    
    # Verificar se o arquivo WSGI existe
    if [ -f "/var/www/seu-usuario_pythonanywhere_com_wsgi.py" ]; then
        echo "‚úÖ Arquivo WSGI existe"
        
        # Verificar conte√∫do do WSGI
        if grep -q "app_pythonanywhere" /var/www/seu-usuario_pythonanywhere_com_wsgi.py; then
            echo "‚úÖ WSGI configurado corretamente"
        else
            echo "‚ö†Ô∏è  WSGI pode n√£o estar configurado corretamente"
            echo "Verifique se aponta para app_pythonanywhere.py"
        fi
    else
        echo "‚ùå Arquivo WSGI n√£o encontrado"
        echo "Configure a aplica√ß√£o web no dashboard do PythonAnywhere"
    fi
}

# Fun√ß√£o para verificar permiss√µes
check_permissions() {
    echo ""
    echo "5. Verificando permiss√µes..."
    
    if [ -r "megasena" ]; then
        echo "‚úÖ Permiss√µes de leitura OK"
    else
        echo "‚ùå Problemas com permiss√µes de leitura"
    fi
    
    if [ -w "megasena/logs" ]; then
        echo "‚úÖ Permiss√µes de escrita nos logs OK"
    else
        echo "‚ùå Problemas com permiss√µes de escrita nos logs"
    fi
}

# Fun√ß√£o para verificar conectividade
check_connectivity() {
    echo ""
    echo "6. Verificando conectividade..."
    
    # Verificar se a aplica√ß√£o responde
    if curl -s https://seu-usuario.pythonanywhere.com/health > /dev/null; then
        echo "‚úÖ Aplica√ß√£o responde via HTTPS"
    else
        echo "‚ùå Aplica√ß√£o n√£o responde via HTTPS"
    fi
    
    # Verificar se a aplica√ß√£o responde via HTTP
    if curl -s http://seu-usuario.pythonanywhere.com/health > /dev/null; then
        echo "‚úÖ Aplica√ß√£o responde via HTTP"
    else
        echo "‚ùå Aplica√ß√£o n√£o responde via HTTP"
    fi
}

# Fun√ß√£o para verificar recursos
check_resources() {
    echo ""
    echo "7. Verificando recursos do sistema..."
    
    echo "üíæ Uso de disco:"
    df -h /home/seu-usuario
    
    echo ""
    echo "üß† Uso de mem√≥ria:"
    free -h
    
    echo ""
    echo "üìä Processos Python:"
    ps aux | grep python | grep -v grep
}

# Fun√ß√£o para verificar configura√ß√£o do dashboard
check_dashboard() {
    echo ""
    echo "8. Verificando configura√ß√£o do dashboard..."
    echo ""
    echo "IMPORTANTE: Verifique manualmente no dashboard:"
    echo "1. Web ‚Üí Sua aplica√ß√£o est√° listada?"
    echo "2. Web ‚Üí Code ‚Üí WSGI file est√° correto?"
    echo "3. Web ‚Üí Environment variables est√£o configuradas?"
    echo "4. Web ‚Üí Reload foi feito ap√≥s mudan√ßas?"
    echo ""
}

# Executar todas as verifica√ß√µes
main() {
    check_files
    check_venv
    check_logs
    check_web_app
    check_permissions
    check_connectivity
    check_resources
    check_dashboard
}

# Executar verifica√ß√µes
main

echo ""
echo "=== Verifica√ß√£o Conclu√≠da! ==="
echo ""
echo "Para acessar a aplica√ß√£o:"
echo "- HTTPS: https://seu-usuario.pythonanywhere.com"
echo "- HTTP: http://seu-usuario.pythonanywhere.com"
echo ""
echo "Comandos √∫teis:"
echo "- Ver logs: tail -f megasena/logs/megasena.log"
echo "- Backup: ./megasena/backup.sh"
echo "- Monitor: ./megasena/monitor.sh"
echo "- Reiniciar: touch /var/www/seu-usuario_pythonanywhere_com_wsgi.py"
echo ""
echo "Se encontrar problemas:"
echo "1. Verifique os logs primeiro"
echo "2. Confirme configura√ß√£o no dashboard"
echo "3. Teste a aplica√ß√£o localmente"
echo "4. Verifique vari√°veis de ambiente" 